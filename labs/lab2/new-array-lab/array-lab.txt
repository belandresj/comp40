                COMP 40 Lab: Unboxed and 2D Arrays


+--------------------------------------------------------+
|Keeper of the record: Yucheng He                        |
|--------------------------------------------------------|
| Other group member(s):  Jun Wang                       |
|                                                        |
|                                                        |
|                                                        |
+--------------------------------------------------------+


PART 1: BOXED AND UNBOXED ARRAYS
--------------------------------

You are about to design the interface and implementation for a
collection data type, I.e. an ADT like Hanson's, and you are
considering the tradeoffs between using a boxed or an unboxed
interface for values that users store in your collection.

1A: Briefly define the terms "boxed" and "unboxed" as used for these
    interfaces (I.e. help us be sure you know which is which!):

When using "boxed" container, the data will not be stored in the 
container directly. Instead, since the "boxed" container only contains
the pointers pointing to the objects which is stored somewhere else 
outside of the "boxed" container. Thus, the data will be stored in the 
corresponding memory as an object outside of the "boxed" container which
is pointed by the pointer stored in the "boxed" container.
When using "unboxed" container, the data will be stored into the 
"unboxed" container directly.



1B: List two (or more) advantages of the boxed representation.

Since the boxed container only stores the pointers to the objects. These 
object can be resized easily.
The interface for the boxed container is more simple comparing to the 
unboxed container.


1C: List two (or more) advantages of an unboxed representation.

The operation of the object stored in the unboxed container is faster 
than that of the object pointed by the pointer stored in the boxed
container.
Since the unboxed container operates the object without pointers, it can
avoid to rewrite the allocated memory for some objects in most situation.


1D: Look at the interface to UArray (the pointer to an interface
    summary is in the lab instructions). Discuss the methods that show
    the use of the unboxed style. Why, for example, does UArray_new
    take both a number of elements and an element size? 

        UArray_new need the length of the array and the size of the 
array element. The array length and the element size can be returned by
UArray_length and UArray_size. And the element stored in UArray can be
reached by UArray_at(T uarray, int i), i is the index of the element. The 
UArray can be resized, if the length of the array is not enough. Call
UArray_resize(T uarray, int length). The new element of the array will be
zeroes. We can also use UArray_copy to copy the old array to new array.


PART 2: 2D Arrays from 1D Arrays
--------------------------------

2A. One way to construct a 2D array is to use multiple 1D
    arrays. Describe briefly how you would do this. For example, if
    the user asked you to create a 7x5 array of values, how many
    one-dimensional arrays would you create? If the user asked to
    store a value in cell [3,6] where would it go?

        First, we create an array with size 7, and each element of 
the array is a pointer to an array with size 5. If we want to visit
[3,6], we first visit fourth element of size 7 array. The element is
the pointer pointing to the size 5 array. Then visit the last element
of the size 5 array.

2B. Another approach is to use a single one-dimensional array and to
    put all the elements of the 2D array into that. Again, assumingg
    that you are to create a 7x5 2D array, give a mathematical formula
    for the index in the 1D array where a value [x,y], would go in the
    1D array.
        We create an array with size 7*5=35. Then we visit the [x,y] is the
5*(x+1)+y+1 element. For example, if the x = 5, y = 4, we just visit the
30th element of the 1D array.


2C. (optional) is there another mapping that would work as well?






PART 3: Designing the UArray2 Interface
---------------------------------------

3A. Describe three (or more) things you learned about the design and semantics 
    of the UArray2 interface that you learned from reading useuarray2.c
    and from running correct_useuarray2.

        UArray2 is kind of like UArray, it use two arguments to present the 
size of the length in UArray. Since it is a 2-D Array, so it has two dimension
arguments of length DIM1 and DIM2, which repreasts height and width of the 2-D
Array. So call UArray2 need DIM1 DIM2 and the size of element.
        Using UArray2_at, need two arguments to represant the location of 
element, DIM1 and DIM2.
        Like Table_map, UArray2 has the similar function named UArray2_map can 
test each elements of the 2-D Array.
        







