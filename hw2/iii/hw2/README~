Name:                Jun Wang & Yucheng He
Assignment number:   Homework 2
Submit Date:         9/28/2015
-----------------------------------------------------------------------------
What has been correctly implemented?

In this assignment, we utilized the bit vector to store the value and utilize
the relationship of the indice between the 1-d and 2-d bit array to reach
the correct element stored in the 2-d bit array. 
In the 2-d bit array (bit2), we can construct a new bit2 array and free the memory which has been allocated for the bit2 array. Through the Bit2_width 
and Bit2_height function, we can get the value of the width and the height 
value of the bit2 array. The Bit2_get and Bit2_put function can get or change
the value of the element in the bit2 array according to the indices. The map
function for the bit2 array can be used to call the function to map all
the elements in the bit2 array by row major or column major.
For unblackedge project, a program named unblackedges was built which can read
the pbm image and remove all the blackedge pixels by checking the value
of the pixels stored in the bit2 array.
The basic idea for unblackedges program, is to set the black pixels at the edge
of the pbm image as the root for a tree structure, and utilize a stack to
traverse the whole tree which is composed by the black pixels which is
connected to the root. The connection here means that from these pixels, we can
reach the root through the neighboring black pixels. Based on this algorithm, 
we build the program named unblackedges, and the program can remove the black
edge of the pbm images very well according to the test with Khan.pbm, 
Hyphen.pbm, and Shakespear.pbm.

-----------------------------------------------------------------------------
What has not been implemented

Since we utilize the tree structure to find all the blackedge pixels and remove
these pixels, it is not necessary to analzye the pixels of the pbm image one
by one through the mapping function. Thus, we didn't use the mapping function
for removing the blackedge pixels.

-----------------------------------------------------------------------------
The critical part of the design checklist





For bit2 array, we utilize the struct below to store the information of the
bit2 array:
struct Bit2_T {
	int width;
	int height;
	Bit_T bit;
}

The most critical functions for bit2 array includes these functions below:
Bit2_T Bit2_new (int width, int height):
This function can be used to create a new 2-d bit array bit2 for future
implementation.

void Bit2_free (Bit2_T *bit2P):
This function can free the memory allocated to the bit2 before.

int Bit2_put (Bit2_T bit2, int i, int j, int n):
This function will store the value of n into the entry (i, j) in the bit2 and
return the previous value of that entry.

int Bit2_get (Bit2_T bit2, int i, int j):
This function will get the value of the entry (i, j) in the bit2.

Void Bit2_map_row_major (Bit2_T bit2, void apply(int i, int j, Bit2_T bit2, int
n, void *p), void *p):
This function calls the apply function for each element in the bit2 and the
column indices change faster than row indices (row major).

Void Bit2_map_col_major (Bit2_T bit2, void apply(int i, int j, Bit2_T bit2, int
n, void *p), void *p):
This function calls the apply function for each element in the bit2 and the row
indices change faster than column indices (column major).

In the implementation, the bitmap will be store the value of pixels of the pbm
image, width of the image, and the height of the image. The height and the 
width will not be changed during the implementation. For the pixels stored in
the bit2 array, the element representing the pixels which are not blackedges
will also remained. During the loop for checking all the pixels at the edge, 
all the pixels which has been checked will also not be changed any more.

-----------------------------------------------------------------------------
Time spent completing the assignment
We spent nearly 30 hours for the whole assignment.
